/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createDaoASA(pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(asset,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "manuallyCloseVoting()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "title": {
          "type": "bytes",
          "key": "title"
        },
        "description": {
          "type": "bytes",
          "key": "description"
        },
        "endDate": {
          "type": "uint64",
          "key": "endDate"
        },
        "voteCount": {
          "type": "uint64",
          "key": "voteCount"
        },
        "yesVoteCount": {
          "type": "uint64",
          "key": "yesVoteCount"
        },
        "registeredASA": {
          "type": "uint64",
          "key": "registeredASA"
        },
        "noVoteCount": {
          "type": "uint64",
          "key": "noVoteCount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DaoWakanda",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "This creates a new Dao and also creates the associated\nASA.",
        "args": [
          {
            "name": "title",
            "type": "string",
            "desc": "The title of the new Dao."
          },
          {
            "name": "description",
            "type": "string",
            "desc": "The description of the new DAO."
          },
          {
            "name": "endDate",
            "type": "uint64",
            "desc": "The timestamp of the end date."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getDaoDetails",
        "desc": "This returns all the information of the DAO in this order:\ntitle, description, endDate, voteCount, yesVoteCount, noVoteCount, registeredASA",
        "args": [],
        "returns": {
          "type": "(string,string,uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "Dao Details"
        }
      },
      {
        "name": "createDaoASA",
        "desc": "This method creates the associated ASA for the DAO.",
        "args": [
          {
            "name": "minimumBalanceTransaction",
            "type": "pay",
            "desc": "Transaction that pays the minimum balance amount\ninto the contract"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Asset ID"
        }
      },
      {
        "name": "register",
        "desc": "Registers an address as a voter for the DAO.",
        "args": [
          {
            "name": "registeredASA",
            "type": "asset",
            "desc": "ASA ID of DAO Asa."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote",
        "desc": "Casts a vote.",
        "args": [
          {
            "name": "registeredASA",
            "type": "asset",
            "desc": "Asset ID for DAO ASA."
          },
          {
            "name": "inFavor",
            "type": "bool",
            "desc": "Indicates whether the vote is in favor of\nor against the proposal."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "manuallyCloseVoting",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the DaoWakanda smart contract.
 */
export type DaoWakanda = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64)void' | 'createApplication', {
      argsObj: {
        /**
         * The title of the new Dao.
         */
        title: string
        /**
         * The description of the new DAO.
         */
        description: string
        /**
         * The timestamp of the end date.
         */
        endDate: bigint | number
      }
      argsTuple: [title: string, description: string, endDate: bigint | number]
      returns: void
    }>
    & Record<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getDaoDetails', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Dao Details
       */
      returns: [string, string, bigint, bigint, bigint, bigint, bigint, bigint]
    }>
    & Record<'createDaoASA(pay)uint64' | 'createDaoASA', {
      argsObj: {
        /**
         * Transaction that pays the minimum balance amount
into the contract
         */
        minimumBalanceTransaction: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [minimumBalanceTransaction: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * Asset ID
       */
      returns: bigint
    }>
    & Record<'register(asset)void' | 'register', {
      argsObj: {
        /**
         * ASA ID of DAO Asa.
         */
        registeredASA: number | bigint
      }
      argsTuple: [registeredASA: number | bigint]
      returns: void
    }>
    & Record<'vote(asset,bool)void' | 'vote', {
      argsObj: {
        /**
         * Asset ID for DAO ASA.
         */
        registeredASA: number | bigint
        /**
         * Indicates whether the vote is in favor of
or against the proposal.
         */
        inFavor: boolean
      }
      argsTuple: [registeredASA: number | bigint, inFavor: boolean]
      returns: void
    }>
    & Record<'manuallyCloseVoting()void' | 'manuallyCloseVoting', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'title'?: BinaryState
      'description'?: BinaryState
      'endDate'?: IntegerState
      'voteCount'?: IntegerState
      'yesVoteCount'?: IntegerState
      'registeredASA'?: IntegerState
      'noVoteCount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DaoWakandaSig = keyof DaoWakanda['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DaoWakandaSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DaoWakanda smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DaoWakandaSig> = DaoWakanda['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DaoWakanda smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DaoWakandaSig> = DaoWakanda['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DaoWakandaCreateCalls = (typeof DaoWakandaCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DaoWakandaCreateCallParams =
  | (TypedCallParams<'createApplication(string,string,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DaoWakandaDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DaoWakandaCreateCalls) => DaoWakandaCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DaoWakandaCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DaoWakanda smart contract using the createApplication(string,string,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.title, args.description, args.endDate],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * This returns all the information of the DAO in this order:
title, description, endDate, voteCount, yesVoteCount, noVoteCount, registeredASA
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDaoDetails(args: MethodArgs<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createDaoASA(pay)uint64 ABI method
   *
   * This method creates the associated ASA for the DAO.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createDaoAsa(args: MethodArgs<'createDaoASA(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createDaoASA(pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.minimumBalanceTransaction],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register(asset)void ABI method
   *
   * Registers an address as a voter for the DAO.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.registeredASA],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote(asset,bool)void ABI method
   *
   * Casts a vote.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vote(args: MethodArgs<'vote(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote(asset,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.registeredASA, args.inFavor],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the manuallyCloseVoting()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static manuallyCloseVoting(args: MethodArgs<'manuallyCloseVoting()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'manuallyCloseVoting()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DaoWakanda smart contract
 */
export class DaoWakandaClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DaoWakandaClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DaoWakanda['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DaoWakanda smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DaoWakandaDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DaoWakandaCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DaoWakanda smart contract using the createApplication(string,string,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(string,string,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(string,string,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DaoWakandaCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DaoWakanda smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * This returns all the information of the DAO in this order:
title, description, endDate, voteCount, yesVoteCount, noVoteCount, registeredASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Dao Details
   */
  public getDaoDetails(args: MethodArgs<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoWakandaCallFactory.getDaoDetails(args, params))
  }

  /**
   * Calls the createDaoASA(pay)uint64 ABI method.
   *
   * This method creates the associated ASA for the DAO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Asset ID
   */
  public createDaoAsa(args: MethodArgs<'createDaoASA(pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoWakandaCallFactory.createDaoAsa(args, params))
  }

  /**
   * Calls the register(asset)void ABI method.
   *
   * Registers an address as a voter for the DAO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoWakandaCallFactory.register(args, params))
  }

  /**
   * Calls the vote(asset,bool)void ABI method.
   *
   * Casts a vote.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vote(args: MethodArgs<'vote(asset,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoWakandaCallFactory.vote(args, params))
  }

  /**
   * Calls the manuallyCloseVoting()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public manuallyCloseVoting(args: MethodArgs<'manuallyCloseVoting()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoWakandaCallFactory.manuallyCloseVoting(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DaoWakanda['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get title() {
        return DaoWakandaClient.getBinaryState(state, 'title')
      },
      get description() {
        return DaoWakandaClient.getBinaryState(state, 'description')
      },
      get endDate() {
        return DaoWakandaClient.getIntegerState(state, 'endDate')
      },
      get voteCount() {
        return DaoWakandaClient.getIntegerState(state, 'voteCount')
      },
      get yesVoteCount() {
        return DaoWakandaClient.getIntegerState(state, 'yesVoteCount')
      },
      get registeredASA() {
        return DaoWakandaClient.getIntegerState(state, 'registeredASA')
      },
      get noVoteCount() {
        return DaoWakandaClient.getIntegerState(state, 'noVoteCount')
      },
    }
  }

  public compose(): DaoWakandaComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getDaoDetails(args: MethodArgs<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDaoDetails(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createDaoAsa(args: MethodArgs<'createDaoASA(pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createDaoAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      register(args: MethodArgs<'register(asset)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      vote(args: MethodArgs<'vote(asset,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.vote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      manuallyCloseVoting(args: MethodArgs<'manuallyCloseVoting()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.manuallyCloseVoting(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DaoWakandaComposer
  }
}
export type DaoWakandaComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * This returns all the information of the DAO in this order:
title, description, endDate, voteCount, yesVoteCount, noVoteCount, registeredASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDaoDetails(args: MethodArgs<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, MethodReturn<'getDaoDetails()(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the createDaoASA(pay)uint64 ABI method.
   *
   * This method creates the associated ASA for the DAO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDaoAsa(args: MethodArgs<'createDaoASA(pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, MethodReturn<'createDaoASA(pay)uint64'>]>

  /**
   * Calls the register(asset)void ABI method.
   *
   * Registers an address as a voter for the DAO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(asset)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, MethodReturn<'register(asset)void'>]>

  /**
   * Calls the vote(asset,bool)void ABI method.
   *
   * Casts a vote.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(args: MethodArgs<'vote(asset,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, MethodReturn<'vote(asset,bool)void'>]>

  /**
   * Calls the manuallyCloseVoting()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  manuallyCloseVoting(args: MethodArgs<'manuallyCloseVoting()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, MethodReturn<'manuallyCloseVoting()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DaoWakanda smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DaoWakandaComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DaoWakandaComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DaoWakandaComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DaoWakandaComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DaoWakandaComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DaoWakandaComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
